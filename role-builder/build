#!/bin/bash
set -eo pipefail
#shopt -s nullglob

# e.g. ./build /vagrant/debug/repo.git HEAD repo master
REPO="$1"; REV="$2"; APP_NAME="$3"; BRANCH="$4";

TMP_WORK_DIR=$(mktemp -d)

./git-clone $REPO $REV $TMP_WORK_DIR

if [ ! -f "$TMP_WORK_DIR/Stackfile" ]; then
	printf "[web]\nimage=progrium/buildstep\nbuildCmd=/build/builder\nrunCmd=/start web\nmountPoint=/app" >> "$TMP_WORK_DIR/Stackfile"
fi

if [ ! -f "$TMP_WORK_DIR/.env" ]; then
	printf "BUILDPACK_URL=https://github.com/heroku/heroku-buildpack-php" >> "$TMP_WORK_DIR/.env"
fi

for container in $(cat "$TMP_WORK_DIR/Stackfile" | ./ini2arr.py --containers); do
	echo "-----> Building $container"

	IMAGE=$(cat "$TMP_WORK_DIR/Stackfile" | ./ini2arr.py $container image)
	BUILDCMD=$(cat "$TMP_WORK_DIR/Stackfile" | ./ini2arr.py $container buildCmd)
	RUNCMD=$(cat "$TMP_WORK_DIR/Stackfile" | ./ini2arr.py $container runCmd)
	MOUNT=$(cat "$TMP_WORK_DIR/Stackfile" | ./ini2arr.py $container mountPoint)
	[ -z "${MOUNT:-}" ] && MOUNT="/app"

	./archive $TMP_WORK_DIR | ./buildstep $APP_NAME $BRANCH $IMAGE $BUILDCMD $MOUNT
	./docker-save $APP_NAME $BRANCH

	PORT=$(cat "$TMP_WORK_DIR/Stackfile" | ./ini2arr.py $container port)
	[ -z "${PORT:-}" ] && PORT=5000
	DATAONLY=$(cat "$TMP_WORK_DIR/Stackfile" | ./ini2arr.py $container dataOnly)
	bundle exec ruby add-to-host-queue.rb "$APP_NAME.$BRANCH.tar.gz" "$RUNCMD" "$PORT" "$DATAONLY"
done

echo "DONE DONE DONE"

rm -rf $TMP_WORK_DIR > /dev/null
